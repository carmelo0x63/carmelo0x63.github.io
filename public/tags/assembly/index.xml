<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assembly on carmelo0x99.github.io</title>
    <link>http://carmelo0x99.github.io/tags/assembly/</link>
    <description>Recent content in assembly on carmelo0x99.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Feb 2022 11:09:00 +0100</lastBuildDate><atom:link href="http://carmelo0x99.github.io/tags/assembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AArch64 assembly - part 5</title>
      <link>http://carmelo0x99.github.io/posts/aarch64_resources/</link>
      <pubDate>Wed, 02 Feb 2022 11:09:00 +0100</pubDate>
      
      <guid>http://carmelo0x99.github.io/posts/aarch64_resources/</guid>
      <description>AArch64 Index Home Let&amp;rsquo;s break the ice Under the surface Under the microscope Cross-compilation Resources   AArch64 Exploring AArch64 assembler
A Guide to ARM64/AArch64 Assembly on Linux with Shellcodes and Cryptography
&amp;lsquo;Hello World&amp;rsquo; in ARM64 Assembly
Writing ARM Assembly Programs
Introduction to Computer Organization: ARM Assembly Language Using the Raspberry Pi
How to read ARM64 assembly language
Arm official guides ARM Cortex-A Series Programmer&amp;rsquo;s Guide for ARMv8-A
Arm Instruction Set Reference Guide</description>
    </item>
    
    <item>
      <title>AArch64 assembly - part 4</title>
      <link>http://carmelo0x99.github.io/posts/aarch64_fourth/</link>
      <pubDate>Wed, 02 Feb 2022 11:08:00 +0100</pubDate>
      
      <guid>http://carmelo0x99.github.io/posts/aarch64_fourth/</guid>
      <description>AArch64 Index Home Let&amp;rsquo;s break the ice Under the surface Under the microscope Cross-compilation Resources   Cross-compilation Interestingly, one does not need to own an ARM64 processor. With the help of QEMU user mode emulation (qemu-user) and the GNU C compiler for AArch64 (gcc-aarch64-linux-gnu), assembling and linking native code is a breeze.Starting from exactly the source code let&amp;rsquo;s run:
Of course, no tricks, the output above has been collected on:</description>
    </item>
    
    <item>
      <title>AArch64 assembly - part 3</title>
      <link>http://carmelo0x99.github.io/posts/aarch64_third/</link>
      <pubDate>Wed, 02 Feb 2022 11:07:00 +0100</pubDate>
      
      <guid>http://carmelo0x99.github.io/posts/aarch64_third/</guid>
      <description>AArch64 Index Home Let&amp;rsquo;s break the ice Under the surface Under the microscope Cross-compilation Resources   Under the microscope We could be happy with the overall result but, since we&amp;rsquo;re dealing with a very low-level language, this little intro wouldn&amp;rsquo;t be complete if GDB wasn&amp;rsquo;t mentioned here.GDB is the GNU Debugger and, while it is indeed full of features and almost an OS by itself, it is not as scary as one could imagine.</description>
    </item>
    
    <item>
      <title>AArch64 assembly - part 2</title>
      <link>http://carmelo0x99.github.io/posts/aarch64_second/</link>
      <pubDate>Wed, 02 Feb 2022 11:05:00 +0100</pubDate>
      
      <guid>http://carmelo0x99.github.io/posts/aarch64_second/</guid>
      <description>AArch64 Index Home Let&amp;rsquo;s break the ice Under the surface Under the microscope Cross-compilation Resources   Under the surface In the process we&amp;rsquo;ve followed not only we&amp;rsquo;ve generated file answer.s but answer.o and answer as well. You may be wondering what are those?answer.o is the object-file, it complies with the ELF format (man elf). Its contents can be displayed through the objdump command.
File answer instead, is an ELF executable.</description>
    </item>
    
    <item>
      <title>AArch64 assembly - part 1</title>
      <link>http://carmelo0x99.github.io/posts/aarch64_first/</link>
      <pubDate>Wed, 02 Feb 2022 10:58:00 +0100</pubDate>
      
      <guid>http://carmelo0x99.github.io/posts/aarch64_first/</guid>
      <description>AArch64 Index Home Let&amp;rsquo;s break the ice Under the surface Under the microscope Cross-compilation Resources   Let&amp;rsquo;s break the ice &amp;hellip; or, let&amp;rsquo;s quickly generate some assembly code and run it.Our very first program Let&amp;rsquo;s write a small assembly program that does nothing but exits by leaving a specific return code.Copy and paste the following code into a file named answer.s.
The program can be assembled and linked with as and ld from binutils:</description>
    </item>
    
    <item>
      <title>AArch64 assembly - part 0</title>
      <link>http://carmelo0x99.github.io/posts/aarch64_home/</link>
      <pubDate>Mon, 24 Jan 2022 14:41:00 +0100</pubDate>
      
      <guid>http://carmelo0x99.github.io/posts/aarch64_home/</guid>
      <description>AArch64 Index Home Let&amp;rsquo;s break the ice Under the surface Under the microscope Cross-compilation Resources   Background I&amp;rsquo;m not exactly a programmer. I can write some (mostly bad) code, understand a few tiny bits here and there, but I can&amp;rsquo;t claim to be an expert here.Be that as it may, I&amp;rsquo;m curious, I&amp;rsquo;m an avid learner, I sweat my way through new things until I reach that A-HA moment.I love tutorials on the Internet because, that&amp;rsquo;s my hope, one can quickly be projected into the practical parts of a new topic.</description>
    </item>
    
  </channel>
</rss>
